#!/usr/bin/env node
import*as O from"commander";import*as C from"fs";import*as k from"path";import*as i from"fs";import*as j from"url";import*as l from"util";var h=j.fileURLToPath(new URL(".",import.meta.url)),c=l.promisify(i.readdir),x=l.promisify(i.mkdir),f=l.promisify(i.copyFile);async function F(o){return(await i.promises.stat(o)).isDirectory()}function y(){let o=k.join(h,"..","package.json"),t=C.readFileSync(o,"utf-8");return JSON.parse(t)}function g(){let{version:o}=y();return o}function D(){let{name:o}=y();return o}function P(){let{description:o}=y();return o}var W=[{flags:"-p, --project <project>",description:"Select a project to copy .env files"},{flags:"-y, --auto-yes",description:"Automatically overwrite files without prompting"}];function u(){let o=new O.Command,t=D(),e=P(),r=g();return o.name(t).description(e).version(r),_(o,W),o.opts()}function _(o,t){for(let e of t)o.option(e.flags,e.description);o.parse(process.argv)}import*as E from"os";import*as n from"path";import S from"inquirer";async function $(){return{overwriteAll:(await S.prompt([{type:"confirm",name:"overwriteAll",message:"Do you want to overwrite all existing files in the current project if it exists?",default:!1}])).overwriteAll}}async function A(o,t){return{overwrite:(await S.prompt([{type:"confirm",name:"overwrite",message:`Warning: ${o} already exists in ${t}. Do you want to overwrite it?`,default:!1}])).overwrite}}var v=n.join(E.homedir(),"env-files");async function d(o,t="",e=!1){let r=n.join(v,o,t),p=await c(r,{recursive:!0});for(let a of p){let s=a.toString(),m=n.join(r,s),I=n.join(process.cwd(),t),w=n.join(process.cwd(),t,s),L=await c(I);await F(m)?(await x(w,{recursive:!0}),await d(o,n.join(t,s),e)):s.endsWith(".env")&&(L.filter(V=>V.toString().endsWith(".env")).length===0?await f(m,w):await N(s,m,w,t,e))}}async function N(o,t,e,r,p){let a=p;a?(await f(t,e),console.log(`Successfully copied ${o} to the ${r}.`)):a?console.log(`Skipped copying ${o} to ${r}.`):(await A(o,r)).overwrite?(await f(t,e),console.log(`Successfully copied ${o} to ${r}.`)):(console.log(`Skipped copying ${o} to ${r}.`),a=!1)}import R from"inquirer";async function J(){return(await c(v,{withFileTypes:!0})).filter(t=>t.isDirectory()).map(t=>t.name)}async function b(o){let t=u();return t.project?(o.includes(t.project)||(console.log("Error: Specified project not found in the directory."),process.exit(1)),t.project):(await R.prompt([{type:"list",name:"project",message:"Select a project to copy .env files:",choices:o}])).project}(async()=>{try{console.log(`CLI Version: ${g()}`);let o=await J(),t=await b(o),e=u();if(!e.autoYes){let r=await $();await d(t,"",r.overwriteAll),console.log("Copy completed successfully!");return}await d(t,"",e.autoYes),console.log("Copy completed successfully!")}catch(o){console.error("Error:",o instanceof Error?o.message:o)}})();
