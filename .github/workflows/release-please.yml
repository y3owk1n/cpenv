on:
    push:
        branches:
            - main

permissions:
    contents: write
    pull-requests: write

name: release-please

jobs:
    release-please:
        runs-on: ubuntu-latest
        steps:
            - uses: googleapis/release-please-action@v4
              id: release
              with:
                  # this assumes that you have created a personal access token
                  # (PAT) and configured it as a GitHub action secret named
                  # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
                  token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
                  # this is a built-in strategy in release-please, see "Action Inputs"
                  # for more options
                  release-type: go

            - uses: actions/checkout@v4
              if: ${{ steps.release.outputs.release_created }}
              with:
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  ref: ${{ github.head_ref }}

            - uses: actions/setup-go@v5
              if: ${{ steps.release.outputs.release_created }}
              with:
                  go-version: "^1.23.3"

            - name: Build project and prepare release artifact
              if: ${{ steps.release.outputs.release_created }}
              run: |
                  mkdir -p build
                  # Build for darwin-arm64
                  env GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/y3owk1n/cpenv/cmd.Version=${{ steps.release.outputs.tag_name }}" -trimpath -o ./build/cpenv-darwin-arm64 ./main.go

                  # Build for darwin-amd64
                  env GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/y3owk1n/cpenv/cmd.Version=${{ steps.release.outputs.tag_name }}" -trimpath -o ./build/cpenv-darwin-amd64 ./main.go

                  # Build for linux-arm64
                  env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/y3owk1n/cpenv/cmd.Version=${{ steps.release.outputs.tag_name }}" -trimpath -o ./build/cpenv-linux-arm64 ./main.go

                  # Build for linux-amd64
                  env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/y3owk1n/cpenv/cmd.Version=${{ steps.release.outputs.tag_name }}" -trimpath -o ./build/cpenv-linux-amd64 ./main.go

                  # Build for windows-amd64
                  env GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/y3owk1n/cpenv/cmd.Version=${{ steps.release.outputs.tag_name }}" -trimpath -o ./build/cpenv-windows64.exe ./main.go

            # Generate SHA256 checksum files for each artifact
            - name: Generate Checksums
              if: ${{ steps.release.outputs.release_created }}
              run: |
                  cd build
                  for file in cpenv-*; do
                      shasum -a 256 "$file" | awk '{print $1}' > "$file.sha256"
                  done
                  ls -l

            # Upload release artifacts and their respective checksum files
            - name: Upload Release Artifacts
              if: ${{ steps.release.outputs.release_created }}
              env:
                  GITHUB_TOKEN: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
              run: |
                  for file in build/cpenv-*; do
                      if [[ "$file" != *.sha256 ]]; then
                          gh release upload "${{ steps.release.outputs.tag_name }}" "$file"
                          gh release upload "${{ steps.release.outputs.tag_name }}" "$file.sha256"
                      fi
                  done
